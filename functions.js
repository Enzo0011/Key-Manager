import * as crypto from "node:crypto";

/**
 * Show name of the script and clear terminal
 *
 * @exports start
 */
export const start = () => {
	process.stdout.write("\x1Bc");
	process.stdout.write("\x1b[35m");
	process.stdout.write(" ".repeat(process.stdout.columns / 2 - 31));
	process.stdout.write("_".repeat(67) + "\n");
	process.stdout.write(" ".repeat(process.stdout.columns / 2 - 31));
	process.stdout.write(
		"|     __ __              __  ___                                  |\n"
	);
	process.stdout.write(" ".repeat(process.stdout.columns / 2 - 31));
	process.stdout.write(
		"|    / //_/__  __  __   /  |/  /___ _____  ____ _____ ____  _____ |\n"
	);
	process.stdout.write(" ".repeat(process.stdout.columns / 2 - 31));
	process.stdout.write(
		"|   / ,< / _ \\/ / / /  / /|_/ / __ `/ __ \\/ __ `/ __ `/ _ \\/ ___/ |\n"
	);
	process.stdout.write(" ".repeat(process.stdout.columns / 2 - 31));
	process.stdout.write(
		"|  / /| /  __/ /_/ /  / /  / / /_/ / / / / /_/ / /_/ /  __/ /     |\n"
	);
	process.stdout.write(" ".repeat(process.stdout.columns / 2 - 31));
	process.stdout.write(
		"| /_/ |_\\___/\\__, /  /_/  /_/\\__,_/_/ /_/\\__,_/\\__, /\\___/_/      |\n"
	);
	process.stdout.write(" ".repeat(process.stdout.columns / 2 - 31));
	process.stdout.write(
		"|          /____/                            /____/               |\n"
	);
	process.stdout.write(" ".repeat(process.stdout.columns / 2 - 31));
	process.stdout.write(
		"|" + " ".repeat(30) + "v1.0.0" + " ".repeat(29) + "|\n"
	);
	process.stdout.write(" ".repeat(process.stdout.columns / 2 - 31));
	process.stdout.write("|" + "_".repeat(65) + "|\n");
	process.stdout.write("\n\n");
	process.stdout.write("\x1b[0m");
};

export const options = `1. Set new Seed
2. Get specific Seed
3. Get All Seeds
4. Extract All Seeds
5. Help
6. Exit

Choose an option: `;

export const seedFile = "key.manager";

export const getHelp = `Usage:
   node index.js
   node index.js --config

Options:
   --config			Configure the program, or restore it if it already exists

	
1. Set new Seed         	Configure a new Seed with its name.
2. Get specific Seed    	Find a specific Seed and display only the Seeds corresponding to this name.
3. Get All Seeds        	Find all encrypted Seeds.
4. Extract All Seeds    	Risky: Extract the encrypted file in plaintext.
5. Help						Show help.
6. Exit                 	Exit the program.

You can easily encrypt you'r seed phase.
It's possible to encrypt your passwords instead of seeds !
Just move the <key.manager> file to a usb key and put it back when you need it !`;

const hash = (data) => {
	return crypto.createHash("sha256").update(data).digest();
};

/**
 * Create credentials with password
 * @param {string} pwd Password
 * @returns {Buffer[]} Key and IV generated by pwd
 */
const createCred = (pwd) => {
	let tmp = hash(pwd);
	const iv = tmp.slice(0, 16);
	tmp = hash(tmp);
	const key = tmp.slice(0, 32);
	return [key, iv];
};

/**
 * Encrypt with Password
 * @param {string} data Data that will be encrypted
 * @param {string} pwd Password used to encrypt
 * @returns {Buffer} Data encrypted
 */
export const encrypt = (data, pwd) => {
	data = Buffer.from(data, "utf-8").toString("hex");
	const [key, iv] = createCred(pwd);
	const cipher = crypto.createCipheriv("aes-256-cbc", key, iv);
	return Buffer.concat([cipher.update(data), cipher.final()]);
};

/**
 * Decrypt with password
 * @param {string} data Data that will be decrypted
 * @param {string} pwd Password used to decrypt
 * @returns {Buffer} Data decrypted
 */
export const decrypt = (data, pwd) => {
	const [key, iv] = createCred(pwd);
	const decipher = crypto.createDecipheriv("aes-256-cbc", key, iv);
	const hex = Buffer.concat([
		decipher.update(data),
		decipher.final(),
	]).toString("utf-8");
	return Buffer.from(hex, "hex").toString("utf-8");
};

//decrypt(encrypt("test", "pass"), "pass")
